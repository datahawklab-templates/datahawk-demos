#!/usr/bin/sh
#######################################################################################################################################
########################################################################################################################################
#                                                              install_nvm
########################################################################################################################################
########################################################################################################################################
install_nvm(){
  cd ~ 
  [ $? -ne 0 ] && echo "error cd to ~": return 1

  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  [ $? -ne 0 ] && echo "error with install nvm": return 1

  export NVM_DIR="$HOME/.nvm"

  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  if [ $? -ne 0 ] && echo "error sourcing $NVM_DIR/nvm.sh"; return 1

  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  [ $? -ne 0 ] && echo "error sourcing $NVM_DIR/bash_completion"; return 1

  return 0
}

#######################################################################################################################################
########################################################################################################################################
#                                                              install_node_lts 
########################################################################################################################################
########################################################################################################################################
install_node_lts(){

    nvm --version >/dev/null 2>&1
    if [ $? -ne 0 ];then
            install_nvm
            if [ $? -ne 0 ];then
                echo "error install nvm"
                return 1
            fi
    fi

    nvm install --lts
    [ $? -ne 0 ] && echo "error installing node.js"; return 1
    return 0
}

#######################################################################################################################################
########################################################################################################################################
#                                                              install_sdkman 
########################################################################################################################################
########################################################################################################################################
install_sdkman() {
  curl -s "https://get.sdkman.io" | bash
  [ $? -ne 0 ] && echo "error installing sdkman via curl"; return 1

  sed -i 's/sdkman_auto_answer=false/sdkman_auto_answer=true/g' ~/.sdkman/etc/config
  [ $? -ne 0 ] && echo "error updating sdkman"; return 1

  sed -i 's/sdkman_auto_selfupdate=false/sdkman_auto_selfupdate=true/g' ~/.sdkman/etc/config
  [ $? -ne 0 ] && "error updating sdkman"; return 1

  source $HOME/.sdkman/bin/sdkman-init.sh
  [ $? -ne 0 ] && "error initializing sdkman" return 1
  return 0
}

#######################################################################################################################################
########################################################################################################################################
#                                                              install_with_sdkman 
########################################################################################################################################
########################################################################################################################################
install_with_sdkman(){
    [ -z "$1" ] && echo "tool type not specified"; return 1
    [ -z "$2" ] && echo "tool version not specified"; return 1

    sdk --version >/dev/null 2>&1
    if [ $? -ne 0 ];then
        install_sdkman
        if [ $? -ne 0 ];then
            echo "error install $1"
            return 1
        fi
    fi

    sdk install $1 $2 && && echo "unable to install $1 $2"; return 1
    return 0
}

#######################################################################################################################################
########################################################################################################################################
#                                                              install_tool 
########################################################################################################################################
########################################################################################################################################
install_tool(){
    [ -z "$1" ] && echo "tool type not specified"; return 1
    
    if [ $1 == "node" ];then
        install_node_lts
        [ $? -ne 0 ] && "error initializing sdkman" return 1  
    elif [ $1 == "java" || $1 == "maven"  || $1 == "gradle" ];then
        [ -z "$2" ] && echo "tool version not specified"; return 1
        install with_sdkman() $1 $2
        [ $? -ne 0 ] && "error initializing sdkman" return 1
    else
       echo "error supplying parameters"
       return 1
    fi

    return 0
}

#######################################################################################################################################
########################################################################################################################################
#                                                              MAIN 
########################################################################################################################################
########################################################################################################################################
while getopts "i:" opt; do
    case $opt in
        i ) set -f # disable glob
            IFS=' ' # split on space characters
            array=($OPTARG) ;; # use the split+glob operator
            install_tool array[0] array[1]
            if [ $? -ne 0 ];then
                exit 0
            fi
        * ) exit 1
    esac
done

install_tool array[0] array[1]
if [ $? -eq 0 ];then
    exit 0
else {
    exit 1
}

#install_tools.sh -i node -i java 16.0.1.j9-adpt -i java 11.0.11.j9-adpt -i java 8.0.292.j9-adpt -i  maven 3.8.1 -i gradle